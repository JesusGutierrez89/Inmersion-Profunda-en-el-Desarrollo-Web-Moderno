// Ejercicio 1.4 - Full Stack Open Helsinki
// Using arrays for course parts

const App = () => {
  const course = 'Half Stack application development'
  const parts = [
    {
      name: 'Fundamentals of React',
      exercises: 10
    },
    {
      name: 'Using props to pass data',
      exercises: 7
    },
    {
      name: 'State of a component',
      exercises: 14
    }
  ]

  return (
    <div>
      <Header course={course} />
      <Content parts={parts} /> 
      <Total parts={parts} />
    </div>
  )
}

const Header = (props) => {
  return <h1>{props.course}</h1>
}

const Content = (props) => {
  return (
    <div>
      <Part part={props.parts[0]} />
      <Part part={props.parts[1]} />
      <Part part={props.parts[2]} />
    </div>
  )
}

const Part = (props) => {
  return (
    <p>
      {props.part.name} {props.part.exercises}
    </p>
  )
}

const Total = (props) => {
  const totalExercises = props.parts[0].exercises + props.parts[1].exercises + props.parts[2].exercises
  
  return (
    <p>
      Number of exercises: {totalExercises}
    </p>
  )
}

export default App

/* 
EXERCISE 1.4 SUMMARY:
- Refactored course parts to use array structure
- Parts are now stored in a single array with objects containing {name, exercises}
- Updated all components to work with array-based data structure
- Content component accesses parts using array indices (parts[0], parts[1], parts[2])
- Total component calculates sum by accessing array elements
- This approach provides better data organization and prepares for dynamic rendering

WHAT CHANGED FROM 1.3:
- Replaced individual part1, part2, part3 objects with single 'parts' array
- Updated prop passing to pass the entire parts array
- Modified components to access parts via array indices
- Maintained same functionality with improved data structure

COMPONENTS STRUCTURE:
App
├── Header (course)
├── Content (parts array)
│   ├── Part (parts[0])
│   ├── Part (parts[1])
│   └── Part (parts[2])
└── Total (parts array)

BENEFITS:
- Cleaner data organization
- Easier to add/remove course parts
- Better preparation for dynamic rendering with map()
- More scalable architecture
*/